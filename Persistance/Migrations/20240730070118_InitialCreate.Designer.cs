// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistance.DbContexts;

#nullable disable

namespace Persistance.Migrations
{
    [DbContext(typeof(GameStoreDbContext))]
    [Migration("20240730070118_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "San Mateo",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 815, DateTimeKind.Local).AddTicks(9631),
                            CreatedBy = "System",
                            PostalCode = "94404",
                            State = "California",
                            StreetAddress = "2207 Bridgepointe Pkwy"
                        },
                        new
                        {
                            Id = 2,
                            City = "San Mateo",
                            Country = "United States",
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 815, DateTimeKind.Local).AddTicks(9680),
                            CreatedBy = "System",
                            PostalCode = "94404",
                            State = "California",
                            StreetAddress = "2207 Bridgepointe Pkwy"
                        },
                        new
                        {
                            Id = 3,
                            City = "Amsterdam",
                            Country = "The Netherlands",
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 815, DateTimeKind.Local).AddTicks(9685),
                            CreatedBy = "System",
                            PostalCode = "1012 RL",
                            State = "",
                            StreetAddress = "Nieuwezijds Voorburgwal 225"
                        },
                        new
                        {
                            Id = 4,
                            City = "Bellevue",
                            Country = "United States",
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 815, DateTimeKind.Local).AddTicks(9713),
                            CreatedBy = "System",
                            PostalCode = "98004",
                            State = "Washington",
                            StreetAddress = "500 108th Avenue North East Suite 2600"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HeadquarterId")
                        .HasColumnType("int");

                    b.Property<int>("Industry")
                        .HasColumnType("int");

                    b.Property<string>("LogoImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HeadquarterId")
                        .IsUnique();

                    b.HasIndex("ParentCompanyId");

                    b.ToTable("Company", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyType = 0,
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 815, DateTimeKind.Local).AddTicks(9994),
                            CreatedBy = "System",
                            EmailAddress = "",
                            HeadquarterId = 1,
                            Industry = 0,
                            Name = "Sony Interactive Entertainment",
                            PhoneNumber = "",
                            TradeName = "Sony Interactive Entertainment",
                            WebsiteUrl = "https://sonyinteractive.com/en/"
                        },
                        new
                        {
                            Id = 2,
                            CompanyType = 2,
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(1),
                            CreatedBy = "System",
                            EmailAddress = "",
                            HeadquarterId = 2,
                            Industry = 0,
                            Name = "PlayStation Studios",
                            ParentCompanyId = 2,
                            PhoneNumber = "",
                            TradeName = "PlayStation Studios",
                            WebsiteUrl = "https://www.playstation.com/en-us/corporate/playstation-studios/"
                        },
                        new
                        {
                            Id = 3,
                            CompanyType = 0,
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(5),
                            CreatedBy = "System",
                            EmailAddress = "",
                            HeadquarterId = 3,
                            Industry = 0,
                            Name = "Guerrilla",
                            ParentCompanyId = 2,
                            PhoneNumber = "",
                            TradeName = "Guerrilla Games",
                            WebsiteUrl = "https://www.guerrilla-games.com/"
                        },
                        new
                        {
                            Id = 4,
                            CompanyType = 0,
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(8),
                            CreatedBy = "System",
                            EmailAddress = "",
                            HeadquarterId = 4,
                            Industry = 0,
                            Name = "Sucker Punch",
                            ParentCompanyId = 2,
                            PhoneNumber = "",
                            TradeName = "Sucker Punch Productions",
                            WebsiteUrl = "https://www.suckerpunch.com/"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Console", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.ToTable("Console", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(288),
                            CreatedBy = "System",
                            DeveloperId = 1,
                            Name = "PlayStation 5",
                            Price = 9988.0m,
                            PurchaseDate = new DateTime(2022, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseDate = new DateTime(2020, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "https://www.playstation.com/sv-se/ps5/"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(299),
                            CreatedBy = "System",
                            DeveloperId = 1,
                            Name = "PlayStation VR2",
                            Price = 7869.0m,
                            PurchaseDate = new DateTime(2023, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseDate = new DateTime(2023, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "https://www.playstation.com/sv-se/ps-vr2/"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ConsoleVideoGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VideoGameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsoleId");

                    b.HasIndex("VideoGameId");

                    b.ToTable("ConsoleVideoGame", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsoleId = 1,
                            VideoGameId = 1
                        },
                        new
                        {
                            Id = 2,
                            ConsoleId = 1,
                            VideoGameId = 2
                        },
                        new
                        {
                            Id = 3,
                            ConsoleId = 1,
                            VideoGameId = 4
                        },
                        new
                        {
                            Id = 4,
                            ConsoleId = 2,
                            VideoGameId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Casual"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Role Playing Games"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Arcade"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Shooter"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Driving/Racing"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Unique"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Sport"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Family"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Party"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Simulator"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Music/Rythm"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Adult"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Brain Training"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Educational"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Fitness"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Quiz"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConsoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VideoGameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsoleId");

                    b.HasIndex("VideoGameId");

                    b.ToTable("Review", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsoleId = 1,
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(904),
                            CreatedBy = "System",
                            Grade = 100,
                            ReviewDate = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(901),
                            ReviewText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(909),
                            CreatedBy = "System",
                            Grade = 100,
                            ReviewDate = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(907),
                            ReviewText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                            VideoGameId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(913),
                            CreatedBy = "System",
                            Grade = 100,
                            ReviewDate = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(911),
                            ReviewText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                            VideoGameId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(916),
                            CreatedBy = "System",
                            Grade = 100,
                            ReviewDate = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(915),
                            ReviewText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                            VideoGameId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(920),
                            CreatedBy = "System",
                            Grade = 100,
                            ReviewDate = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(918),
                            ReviewText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                            VideoGameId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Trophy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrophyValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VideoGameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VideoGameId");

                    b.ToTable("Trophy", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VideoGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("TotalTimePlayed")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.ToTable("VideoGame", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(1103),
                            CreatedBy = "System",
                            DeveloperId = 2,
                            Name = "Horizon Zero Dawn - Complete Edition",
                            Price = 229.0m,
                            PurchaseDate = new DateTime(2023, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseDate = new DateTime(2019, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Horizon Zero Dawn - Complete Edition",
                            TotalTimePlayed = new TimeSpan(0, 0, 0, 0, 0),
                            Url = "https://store.playstation.com/sv-se/product/EP9000-CUSA10211_00-HRZCE00000000000"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(1112),
                            CreatedBy = "System",
                            DeveloperId = 2,
                            Name = "Horizon Forbidden West - Complete Edition",
                            Price = 799.0m,
                            PurchaseDate = new DateTime(2023, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseDate = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Horizon Forbidden West - Complete Edition",
                            TotalTimePlayed = new TimeSpan(0, 0, 0, 0, 0),
                            Url = "https://www.playstation.com/sv-se/games/horizon-forbidden-west/"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(1122),
                            CreatedBy = "System",
                            DeveloperId = 2,
                            Name = "Horizon Call of the Mountain",
                            Price = 739.0m,
                            PurchaseDate = new DateTime(2023, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseDate = new DateTime(2023, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Horizon Call of the Mountain",
                            TotalTimePlayed = new TimeSpan(0, 0, 0, 0, 0),
                            Url = "https://www.playstation.com/sv-se/games/horizon-call-of-the-mountain/"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 7, 30, 9, 1, 18, 816, DateTimeKind.Local).AddTicks(1131),
                            CreatedBy = "System",
                            DeveloperId = 3,
                            Name = "Ghost of Tsushima DIRECTOR’S CUT",
                            Price = 0.0m,
                            PurchaseDate = new DateTime(2022, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseDate = new DateTime(2021, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Ghost of Tsushima DIRECTOR’S CUT",
                            TotalTimePlayed = new TimeSpan(0, 0, 0, 0, 0),
                            Url = "https://www.playstation.com/en-se/games/ghost-of-tsushima/"
                        });
                });

            modelBuilder.Entity("Domain.Entities.VideoGameGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VideoGameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("VideoGameId");

                    b.ToTable("VideoGameGenre", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreId = 1,
                            VideoGameId = 1
                        },
                        new
                        {
                            Id = 2,
                            GenreId = 5,
                            VideoGameId = 1
                        },
                        new
                        {
                            Id = 3,
                            GenreId = 1,
                            VideoGameId = 2
                        },
                        new
                        {
                            Id = 4,
                            GenreId = 5,
                            VideoGameId = 2
                        },
                        new
                        {
                            Id = 5,
                            GenreId = 1,
                            VideoGameId = 3
                        },
                        new
                        {
                            Id = 6,
                            GenreId = 2,
                            VideoGameId = 3
                        },
                        new
                        {
                            Id = 7,
                            GenreId = 1,
                            VideoGameId = 4
                        },
                        new
                        {
                            Id = 8,
                            GenreId = 5,
                            VideoGameId = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.HasOne("Domain.Entities.Address", "Headquarter")
                        .WithOne("Company")
                        .HasForeignKey("Domain.Entities.Company", "HeadquarterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Company", "ParentCompany")
                        .WithMany()
                        .HasForeignKey("ParentCompanyId");

                    b.Navigation("Headquarter");

                    b.Navigation("ParentCompany");
                });

            modelBuilder.Entity("Domain.Entities.Console", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Developer")
                        .WithMany("Consoles")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("Domain.Entities.ConsoleVideoGame", b =>
                {
                    b.HasOne("Domain.Entities.Console", "Console")
                        .WithMany("ConsoleVideoGames")
                        .HasForeignKey("ConsoleId")
                        .IsRequired();

                    b.HasOne("Domain.Entities.VideoGame", "VideoGame")
                        .WithMany("ConsoleVideoGames")
                        .HasForeignKey("VideoGameId")
                        .IsRequired();

                    b.Navigation("Console");

                    b.Navigation("VideoGame");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.HasOne("Domain.Entities.Console", "Console")
                        .WithMany("Reviews")
                        .HasForeignKey("ConsoleId");

                    b.HasOne("Domain.Entities.VideoGame", "VideoGame")
                        .WithMany("Reviews")
                        .HasForeignKey("VideoGameId");

                    b.Navigation("Console");

                    b.Navigation("VideoGame");
                });

            modelBuilder.Entity("Domain.Entities.Trophy", b =>
                {
                    b.HasOne("Domain.Entities.VideoGame", "VideoGame")
                        .WithMany("Trophies")
                        .HasForeignKey("VideoGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VideoGame");
                });

            modelBuilder.Entity("Domain.Entities.VideoGame", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Developer")
                        .WithMany("VideoGames")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("Domain.Entities.VideoGameGenre", b =>
                {
                    b.HasOne("Domain.Entities.Genre", "Genre")
                        .WithMany("VideoGameGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired();

                    b.HasOne("Domain.Entities.VideoGame", "VideoGame")
                        .WithMany("VideoGameGenres")
                        .HasForeignKey("VideoGameId")
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("VideoGame");
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Navigation("Consoles");

                    b.Navigation("VideoGames");
                });

            modelBuilder.Entity("Domain.Entities.Console", b =>
                {
                    b.Navigation("ConsoleVideoGames");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.Genre", b =>
                {
                    b.Navigation("VideoGameGenres");
                });

            modelBuilder.Entity("Domain.Entities.VideoGame", b =>
                {
                    b.Navigation("ConsoleVideoGames");

                    b.Navigation("Reviews");

                    b.Navigation("Trophies");

                    b.Navigation("VideoGameGenres");
                });
#pragma warning restore 612, 618
        }
    }
}
